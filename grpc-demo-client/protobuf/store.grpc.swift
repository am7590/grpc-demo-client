//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: store.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Store_InventoryClient`, then call methods of this protocol to make API calls.
public protocol Store_InventoryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Store_InventoryClientInterceptorFactoryProtocol? { get }

  func add(
    _ request: Store_Item,
    callOptions: CallOptions?
  ) -> UnaryCall<Store_Item, Store_InventoryChangeResponse>

  func remove(
    _ request: Store_ItemIdentifier,
    callOptions: CallOptions?
  ) -> UnaryCall<Store_ItemIdentifier, Store_InventoryChangeResponse>

  func get(
    _ request: Store_ItemIdentifier,
    callOptions: CallOptions?
  ) -> UnaryCall<Store_ItemIdentifier, Store_Item>

  func updateQuantity(
    _ request: Store_QuantityChangeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Store_QuantityChangeRequest, Store_InventoryUpdateResponse>

  func updatePrice(
    _ request: Store_PriceChangeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Store_PriceChangeRequest, Store_InventoryUpdateResponse>

  func watch(
    _ request: Store_ItemIdentifier,
    callOptions: CallOptions?,
    handler: @escaping (Store_Item) -> Void
  ) -> ServerStreamingCall<Store_ItemIdentifier, Store_Item>
}

extension Store_InventoryClientProtocol {
  public var serviceName: String {
    return "store.Inventory"
  }

  /// Insert item
  ///
  /// - Parameters:
  ///   - request: Request to send to Add.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func add(
    _ request: Store_Item,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Store_Item, Store_InventoryChangeResponse> {
    return self.makeUnaryCall(
      path: Store_InventoryClientMetadata.Methods.add.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddInterceptors() ?? []
    )
  }

  /// Remove item(s) from the inventory
  ///
  /// - Parameters:
  ///   - request: Request to send to Remove.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func remove(
    _ request: Store_ItemIdentifier,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Store_ItemIdentifier, Store_InventoryChangeResponse> {
    return self.makeUnaryCall(
      path: Store_InventoryClientMetadata.Methods.remove.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRemoveInterceptors() ?? []
    )
  }

  /// Get item info
  ///
  /// - Parameters:
  ///   - request: Request to send to Get.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func get(
    _ request: Store_ItemIdentifier,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Store_ItemIdentifier, Store_Item> {
    return self.makeUnaryCall(
      path: Store_InventoryClientMetadata.Methods.get.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetInterceptors() ?? []
    )
  }

  /// Increase/decrease an item's stock quantity
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateQuantity.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateQuantity(
    _ request: Store_QuantityChangeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Store_QuantityChangeRequest, Store_InventoryUpdateResponse> {
    return self.makeUnaryCall(
      path: Store_InventoryClientMetadata.Methods.updateQuantity.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateQuantityInterceptors() ?? []
    )
  }

  /// Increase/decrease an item's price
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdatePrice.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updatePrice(
    _ request: Store_PriceChangeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Store_PriceChangeRequest, Store_InventoryUpdateResponse> {
    return self.makeUnaryCall(
      path: Store_InventoryClientMetadata.Methods.updatePrice.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdatePriceInterceptors() ?? []
    )
  }

  /// Stream Item updates from the inventory
  ///
  /// - Parameters:
  ///   - request: Request to send to Watch.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func watch(
    _ request: Store_ItemIdentifier,
    callOptions: CallOptions? = nil,
    handler: @escaping (Store_Item) -> Void
  ) -> ServerStreamingCall<Store_ItemIdentifier, Store_Item> {
    return self.makeServerStreamingCall(
      path: Store_InventoryClientMetadata.Methods.watch.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWatchInterceptors() ?? [],
      handler: handler
    )
  }
}

@available(*, deprecated)
extension Store_InventoryClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Store_InventoryNIOClient")
public final class Store_InventoryClient: Store_InventoryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Store_InventoryClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Store_InventoryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the store.Inventory service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Store_InventoryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Store_InventoryNIOClient: Store_InventoryClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Store_InventoryClientInterceptorFactoryProtocol?

  /// Creates a client for the store.Inventory service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Store_InventoryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Store_InventoryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Store_InventoryClientInterceptorFactoryProtocol? { get }

  func makeAddCall(
    _ request: Store_Item,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Store_Item, Store_InventoryChangeResponse>

  func makeRemoveCall(
    _ request: Store_ItemIdentifier,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Store_ItemIdentifier, Store_InventoryChangeResponse>

  func makeGetCall(
    _ request: Store_ItemIdentifier,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Store_ItemIdentifier, Store_Item>

  func makeUpdateQuantityCall(
    _ request: Store_QuantityChangeRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Store_QuantityChangeRequest, Store_InventoryUpdateResponse>

  func makeUpdatePriceCall(
    _ request: Store_PriceChangeRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Store_PriceChangeRequest, Store_InventoryUpdateResponse>

  func makeWatchCall(
    _ request: Store_ItemIdentifier,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<Store_ItemIdentifier, Store_Item>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Store_InventoryAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Store_InventoryClientMetadata.serviceDescriptor
  }

  public var interceptors: Store_InventoryClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeAddCall(
    _ request: Store_Item,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Store_Item, Store_InventoryChangeResponse> {
    return self.makeAsyncUnaryCall(
      path: Store_InventoryClientMetadata.Methods.add.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddInterceptors() ?? []
    )
  }

  public func makeRemoveCall(
    _ request: Store_ItemIdentifier,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Store_ItemIdentifier, Store_InventoryChangeResponse> {
    return self.makeAsyncUnaryCall(
      path: Store_InventoryClientMetadata.Methods.remove.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRemoveInterceptors() ?? []
    )
  }

  public func makeGetCall(
    _ request: Store_ItemIdentifier,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Store_ItemIdentifier, Store_Item> {
    return self.makeAsyncUnaryCall(
      path: Store_InventoryClientMetadata.Methods.get.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetInterceptors() ?? []
    )
  }

  public func makeUpdateQuantityCall(
    _ request: Store_QuantityChangeRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Store_QuantityChangeRequest, Store_InventoryUpdateResponse> {
    return self.makeAsyncUnaryCall(
      path: Store_InventoryClientMetadata.Methods.updateQuantity.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateQuantityInterceptors() ?? []
    )
  }

  public func makeUpdatePriceCall(
    _ request: Store_PriceChangeRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Store_PriceChangeRequest, Store_InventoryUpdateResponse> {
    return self.makeAsyncUnaryCall(
      path: Store_InventoryClientMetadata.Methods.updatePrice.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdatePriceInterceptors() ?? []
    )
  }

  public func makeWatchCall(
    _ request: Store_ItemIdentifier,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<Store_ItemIdentifier, Store_Item> {
    return self.makeAsyncServerStreamingCall(
      path: Store_InventoryClientMetadata.Methods.watch.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWatchInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Store_InventoryAsyncClientProtocol {
  public func add(
    _ request: Store_Item,
    callOptions: CallOptions? = nil
  ) async throws -> Store_InventoryChangeResponse {
    return try await self.performAsyncUnaryCall(
      path: Store_InventoryClientMetadata.Methods.add.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddInterceptors() ?? []
    )
  }

  public func remove(
    _ request: Store_ItemIdentifier,
    callOptions: CallOptions? = nil
  ) async throws -> Store_InventoryChangeResponse {
    return try await self.performAsyncUnaryCall(
      path: Store_InventoryClientMetadata.Methods.remove.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRemoveInterceptors() ?? []
    )
  }

  public func get(
    _ request: Store_ItemIdentifier,
    callOptions: CallOptions? = nil
  ) async throws -> Store_Item {
    return try await self.performAsyncUnaryCall(
      path: Store_InventoryClientMetadata.Methods.get.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetInterceptors() ?? []
    )
  }

  public func updateQuantity(
    _ request: Store_QuantityChangeRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Store_InventoryUpdateResponse {
    return try await self.performAsyncUnaryCall(
      path: Store_InventoryClientMetadata.Methods.updateQuantity.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateQuantityInterceptors() ?? []
    )
  }

  public func updatePrice(
    _ request: Store_PriceChangeRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Store_InventoryUpdateResponse {
    return try await self.performAsyncUnaryCall(
      path: Store_InventoryClientMetadata.Methods.updatePrice.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdatePriceInterceptors() ?? []
    )
  }

  public func watch(
    _ request: Store_ItemIdentifier,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Store_Item> {
    return self.performAsyncServerStreamingCall(
      path: Store_InventoryClientMetadata.Methods.watch.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWatchInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Store_InventoryAsyncClient: Store_InventoryAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Store_InventoryClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Store_InventoryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public protocol Store_InventoryClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'add'.
  func makeAddInterceptors() -> [ClientInterceptor<Store_Item, Store_InventoryChangeResponse>]

  /// - Returns: Interceptors to use when invoking 'remove'.
  func makeRemoveInterceptors() -> [ClientInterceptor<Store_ItemIdentifier, Store_InventoryChangeResponse>]

  /// - Returns: Interceptors to use when invoking 'get'.
  func makeGetInterceptors() -> [ClientInterceptor<Store_ItemIdentifier, Store_Item>]

  /// - Returns: Interceptors to use when invoking 'updateQuantity'.
  func makeUpdateQuantityInterceptors() -> [ClientInterceptor<Store_QuantityChangeRequest, Store_InventoryUpdateResponse>]

  /// - Returns: Interceptors to use when invoking 'updatePrice'.
  func makeUpdatePriceInterceptors() -> [ClientInterceptor<Store_PriceChangeRequest, Store_InventoryUpdateResponse>]

  /// - Returns: Interceptors to use when invoking 'watch'.
  func makeWatchInterceptors() -> [ClientInterceptor<Store_ItemIdentifier, Store_Item>]
}

public enum Store_InventoryClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Inventory",
    fullName: "store.Inventory",
    methods: [
      Store_InventoryClientMetadata.Methods.add,
      Store_InventoryClientMetadata.Methods.remove,
      Store_InventoryClientMetadata.Methods.get,
      Store_InventoryClientMetadata.Methods.updateQuantity,
      Store_InventoryClientMetadata.Methods.updatePrice,
      Store_InventoryClientMetadata.Methods.watch,
    ]
  )

  public enum Methods {
    public static let add = GRPCMethodDescriptor(
      name: "Add",
      path: "/store.Inventory/Add",
      type: GRPCCallType.unary
    )

    public static let remove = GRPCMethodDescriptor(
      name: "Remove",
      path: "/store.Inventory/Remove",
      type: GRPCCallType.unary
    )

    public static let get = GRPCMethodDescriptor(
      name: "Get",
      path: "/store.Inventory/Get",
      type: GRPCCallType.unary
    )

    public static let updateQuantity = GRPCMethodDescriptor(
      name: "UpdateQuantity",
      path: "/store.Inventory/UpdateQuantity",
      type: GRPCCallType.unary
    )

    public static let updatePrice = GRPCMethodDescriptor(
      name: "UpdatePrice",
      path: "/store.Inventory/UpdatePrice",
      type: GRPCCallType.unary
    )

    public static let watch = GRPCMethodDescriptor(
      name: "Watch",
      path: "/store.Inventory/Watch",
      type: GRPCCallType.serverStreaming
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Store_InventoryProvider: CallHandlerProvider {
  var interceptors: Store_InventoryServerInterceptorFactoryProtocol? { get }

  /// Insert item
  func add(request: Store_Item, context: StatusOnlyCallContext) -> EventLoopFuture<Store_InventoryChangeResponse>

  /// Remove item(s) from the inventory
  func remove(request: Store_ItemIdentifier, context: StatusOnlyCallContext) -> EventLoopFuture<Store_InventoryChangeResponse>

  /// Get item info
  func get(request: Store_ItemIdentifier, context: StatusOnlyCallContext) -> EventLoopFuture<Store_Item>

  /// Increase/decrease an item's stock quantity
  func updateQuantity(request: Store_QuantityChangeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Store_InventoryUpdateResponse>

  /// Increase/decrease an item's price
  func updatePrice(request: Store_PriceChangeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Store_InventoryUpdateResponse>

  /// Stream Item updates from the inventory
  func watch(request: Store_ItemIdentifier, context: StreamingResponseCallContext<Store_Item>) -> EventLoopFuture<GRPCStatus>
}

extension Store_InventoryProvider {
  public var serviceName: Substring {
    return Store_InventoryServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Add":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Store_Item>(),
        responseSerializer: ProtobufSerializer<Store_InventoryChangeResponse>(),
        interceptors: self.interceptors?.makeAddInterceptors() ?? [],
        userFunction: self.add(request:context:)
      )

    case "Remove":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Store_ItemIdentifier>(),
        responseSerializer: ProtobufSerializer<Store_InventoryChangeResponse>(),
        interceptors: self.interceptors?.makeRemoveInterceptors() ?? [],
        userFunction: self.remove(request:context:)
      )

    case "Get":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Store_ItemIdentifier>(),
        responseSerializer: ProtobufSerializer<Store_Item>(),
        interceptors: self.interceptors?.makeGetInterceptors() ?? [],
        userFunction: self.get(request:context:)
      )

    case "UpdateQuantity":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Store_QuantityChangeRequest>(),
        responseSerializer: ProtobufSerializer<Store_InventoryUpdateResponse>(),
        interceptors: self.interceptors?.makeUpdateQuantityInterceptors() ?? [],
        userFunction: self.updateQuantity(request:context:)
      )

    case "UpdatePrice":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Store_PriceChangeRequest>(),
        responseSerializer: ProtobufSerializer<Store_InventoryUpdateResponse>(),
        interceptors: self.interceptors?.makeUpdatePriceInterceptors() ?? [],
        userFunction: self.updatePrice(request:context:)
      )

    case "Watch":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Store_ItemIdentifier>(),
        responseSerializer: ProtobufSerializer<Store_Item>(),
        interceptors: self.interceptors?.makeWatchInterceptors() ?? [],
        userFunction: self.watch(request:context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Store_InventoryAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Store_InventoryServerInterceptorFactoryProtocol? { get }

  /// Insert item
  func add(
    request: Store_Item,
    context: GRPCAsyncServerCallContext
  ) async throws -> Store_InventoryChangeResponse

  /// Remove item(s) from the inventory
  func remove(
    request: Store_ItemIdentifier,
    context: GRPCAsyncServerCallContext
  ) async throws -> Store_InventoryChangeResponse

  /// Get item info
  func get(
    request: Store_ItemIdentifier,
    context: GRPCAsyncServerCallContext
  ) async throws -> Store_Item

  /// Increase/decrease an item's stock quantity
  func updateQuantity(
    request: Store_QuantityChangeRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Store_InventoryUpdateResponse

  /// Increase/decrease an item's price
  func updatePrice(
    request: Store_PriceChangeRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Store_InventoryUpdateResponse

  /// Stream Item updates from the inventory
  func watch(
    request: Store_ItemIdentifier,
    responseStream: GRPCAsyncResponseStreamWriter<Store_Item>,
    context: GRPCAsyncServerCallContext
  ) async throws
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Store_InventoryAsyncProvider {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Store_InventoryServerMetadata.serviceDescriptor
  }

  public var serviceName: Substring {
    return Store_InventoryServerMetadata.serviceDescriptor.fullName[...]
  }

  public var interceptors: Store_InventoryServerInterceptorFactoryProtocol? {
    return nil
  }

  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Add":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Store_Item>(),
        responseSerializer: ProtobufSerializer<Store_InventoryChangeResponse>(),
        interceptors: self.interceptors?.makeAddInterceptors() ?? [],
        wrapping: { try await self.add(request: $0, context: $1) }
      )

    case "Remove":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Store_ItemIdentifier>(),
        responseSerializer: ProtobufSerializer<Store_InventoryChangeResponse>(),
        interceptors: self.interceptors?.makeRemoveInterceptors() ?? [],
        wrapping: { try await self.remove(request: $0, context: $1) }
      )

    case "Get":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Store_ItemIdentifier>(),
        responseSerializer: ProtobufSerializer<Store_Item>(),
        interceptors: self.interceptors?.makeGetInterceptors() ?? [],
        wrapping: { try await self.get(request: $0, context: $1) }
      )

    case "UpdateQuantity":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Store_QuantityChangeRequest>(),
        responseSerializer: ProtobufSerializer<Store_InventoryUpdateResponse>(),
        interceptors: self.interceptors?.makeUpdateQuantityInterceptors() ?? [],
        wrapping: { try await self.updateQuantity(request: $0, context: $1) }
      )

    case "UpdatePrice":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Store_PriceChangeRequest>(),
        responseSerializer: ProtobufSerializer<Store_InventoryUpdateResponse>(),
        interceptors: self.interceptors?.makeUpdatePriceInterceptors() ?? [],
        wrapping: { try await self.updatePrice(request: $0, context: $1) }
      )

    case "Watch":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Store_ItemIdentifier>(),
        responseSerializer: ProtobufSerializer<Store_Item>(),
        interceptors: self.interceptors?.makeWatchInterceptors() ?? [],
        wrapping: { try await self.watch(request: $0, responseStream: $1, context: $2) }
      )

    default:
      return nil
    }
  }
}

public protocol Store_InventoryServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'add'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAddInterceptors() -> [ServerInterceptor<Store_Item, Store_InventoryChangeResponse>]

  /// - Returns: Interceptors to use when handling 'remove'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRemoveInterceptors() -> [ServerInterceptor<Store_ItemIdentifier, Store_InventoryChangeResponse>]

  /// - Returns: Interceptors to use when handling 'get'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetInterceptors() -> [ServerInterceptor<Store_ItemIdentifier, Store_Item>]

  /// - Returns: Interceptors to use when handling 'updateQuantity'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateQuantityInterceptors() -> [ServerInterceptor<Store_QuantityChangeRequest, Store_InventoryUpdateResponse>]

  /// - Returns: Interceptors to use when handling 'updatePrice'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdatePriceInterceptors() -> [ServerInterceptor<Store_PriceChangeRequest, Store_InventoryUpdateResponse>]

  /// - Returns: Interceptors to use when handling 'watch'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeWatchInterceptors() -> [ServerInterceptor<Store_ItemIdentifier, Store_Item>]
}

public enum Store_InventoryServerMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Inventory",
    fullName: "store.Inventory",
    methods: [
      Store_InventoryServerMetadata.Methods.add,
      Store_InventoryServerMetadata.Methods.remove,
      Store_InventoryServerMetadata.Methods.get,
      Store_InventoryServerMetadata.Methods.updateQuantity,
      Store_InventoryServerMetadata.Methods.updatePrice,
      Store_InventoryServerMetadata.Methods.watch,
    ]
  )

  public enum Methods {
    public static let add = GRPCMethodDescriptor(
      name: "Add",
      path: "/store.Inventory/Add",
      type: GRPCCallType.unary
    )

    public static let remove = GRPCMethodDescriptor(
      name: "Remove",
      path: "/store.Inventory/Remove",
      type: GRPCCallType.unary
    )

    public static let get = GRPCMethodDescriptor(
      name: "Get",
      path: "/store.Inventory/Get",
      type: GRPCCallType.unary
    )

    public static let updateQuantity = GRPCMethodDescriptor(
      name: "UpdateQuantity",
      path: "/store.Inventory/UpdateQuantity",
      type: GRPCCallType.unary
    )

    public static let updatePrice = GRPCMethodDescriptor(
      name: "UpdatePrice",
      path: "/store.Inventory/UpdatePrice",
      type: GRPCCallType.unary
    )

    public static let watch = GRPCMethodDescriptor(
      name: "Watch",
      path: "/store.Inventory/Watch",
      type: GRPCCallType.serverStreaming
    )
  }
}
